"""Retrieves image features generated by LIFEx"""

from common import datasets_root, feature_prefix,\
     features_root_folder, lifex_raw_features_subfolder,\
     lifex_raw_feature_file, lifex_features, pattern_id_column,\
     src_image_column
from functions import retrieve_lifex_features

def _extract_pattern_id_lifex_BrEaST(name_of_roi):
    """Extracts case ID from the 'INFO_NameOfRoi' field of the
    LIFEx-generated otuput file
    
    Parameters
    ----------
    name_of_roi : str
        Value of the 'INFO_NameOfRoi' field in a LIFEx-generated output 
        file.
        
    Returns
    -------
    pattern_id : int
        The pattern id.
    """
    
    #The left and right substrings
    substr = (left := 'case', right := '_')
    
    #Get indices of the substrings
    idx_left, idx_right = [name_of_roi.index(s) for s in substr]
    
    #Get the elements in between
    case_id = str()
    for idx in range(idx_left + len(left), idx_right):
        case_id = case_id + name_of_roi[idx]        
    
    return int(case_id)

def _extract_pattern_id_lifex_BUID(name_of_roi):
    """Extracts case ID from the 'INFO_NameOfRoi' field of the
    LIFEx-generated otuput file
    
    Parameters
    ----------
    name_of_roi : str
        Value of the 'INFO_NameOfRoi' field in a LIFEx-generated output 
        file.
        
    Returns
    -------
    pattern_id : str
        The pattern id.
    """    
    return name_of_roi.rstrip('_mask')

datasets = {'BrEaST': _extract_pattern_id_lifex_BrEaST,
            'BUID': _extract_pattern_id_lifex_BUID}

for dataset, parser in datasets.items():
    
    #File where the raw LIFEx-computed features are stored
    lifex_raw_src = (f'{datasets_root}/{dataset}/'
                     f'{lifex_raw_features_subfolder}/'
                     f'{lifex_raw_feature_file}')
    
    #Save the extracted features here
    dst_folder = f'{features_root_folder}/{dataset}'    
    
    for group, features in lifex_features.items():
        df_features = retrieve_lifex_features(
            feature_names=features, lifex_out_file=lifex_raw_src,
            feature_prefix=feature_prefix,
            pattern_id_column=pattern_id_column,
            image_filename_column=src_image_column,
            parser=parser
        )
            
        destination = (f'{dst_folder}/{group}.csv')
        df_features.to_csv(path_or_buf=destination, index=False)
        

